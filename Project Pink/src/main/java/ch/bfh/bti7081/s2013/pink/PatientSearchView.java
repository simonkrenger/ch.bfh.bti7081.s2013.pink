package ch.bfh.bti7081.s2013.pink;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.FieldEvents;
import com.vaadin.server.Resource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.*;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

/**
 * View class that allows to search for a patient.
 * 
 * @author Marco Berger <lostchall@gmail.com>
 * 
 */
@SuppressWarnings("serial")
public class PatientSearchView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private Label title;
    private List<ChangeListener> searchListener = new ArrayList<ChangeListener>();
    private TextField searchBox;
    private String searchValue;
    private String lastInput;

    /**
     * Gets the current Search Value.
     *
     * @return Search Text Value.
     */
    public String getSearchValue()
    {
        return lastInput;
    }

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public PatientSearchView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("90px");

		// top-level component properties
		setWidth("100.0%");
		setHeight("90px");

		// Set BG
		Resource res = new ThemeResource("img/searchBG.png");

		// Display the image without caption
		Image searchbg = new Image(null, res);
		mainLayout.addComponent(searchbg);

		// Create the search field
        searchBox = new TextField("Search for patient");
        searchBox.setTextChangeTimeout(300);
        searchBox.setTextChangeEventMode(AbstractTextField.TextChangeEventMode.TIMEOUT);

        searchBox.addTextChangeListener(new FieldEvents.TextChangeListener() {
            @Override
            public void textChange(FieldEvents.TextChangeEvent event) {
                lastInput = event.getText();
                patientSearch();
            }
        });

		// Put some initial content in it
		// tf.setValue("");/*
		mainLayout.addComponent(searchBox, "top:30px;left:200px;");

		// Next Sessions
		title = new Label();
		title.setValue("Next sessions");
		mainLayout.addComponent(title, "top:70px;left:200px;");
        Button searchButton = new Button("Search", new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                patientSearch();
            }
        });
		mainLayout.addComponent(searchButton, "top:30px;left:330px;");
		return mainLayout;
	}

	private void patientSearch()
    {
		if (this.searchListener != null && !this.searchListener.isEmpty())
        {
            if (!lastInput.equalsIgnoreCase(searchValue))
            {
                ChangeEvent event = new ChangeEvent(lastInput);
                for (ChangeListener eventListener : searchListener)
                {
                    eventListener.stateChanged(event);
                }

                searchValue = lastInput;
            }
			// TODO
        }
	}

    /**
     * Listener to allow getting a new Search Input.
     *
     * @param e as a EventListener.
     */
    public void AddSearchListener(ChangeListener e)
    {
        this.searchListener.add(e);
    }
}